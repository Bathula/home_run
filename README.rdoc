= home_run

home_run is an implementation of ruby's Date/DateTime classes in C,
with much better performance (20-200x) than the version in the
standard library, while being almost completely compatible.

== Installing the gem

  gem install home_run

The standard gem requires compiling from source, so you need a working
compiler toolchain.  Since few Windows users have a working compiler
toolchain, a windows binary gem is available that works on both 1.8
and 1.9.

== Installing into site_ruby

After installing the gem:

  home_run --install

Installing into site_ruby means that ruby will always use home_run's
Date/DateTime classes instead of the ones in the standard library.

If you ever want to uninstall from site_ruby:

  home_run --uninstall

== Running without installing into site_ruby

If you don't want to install into site_ruby, you can use home_run's
Date/DateTime classes for specific programs by running your script
using home_run:

  home_run ruby ...
  home_run irb ...
  home_run unicorn ...
  home_run rake ...

This manipulates the RUBYLIB and RUBYOPT environment variables so
that home_run's Date/DateTime classes will be used.

== Running the specs

You can run the specs after installing the gem, if you have MSpec
installed (gem install mspec):

  home_run --spec

If there are any failures, please report them as a bug.

== Running comparative benchmarks

You can run the benchmarks after installing the gem:

  home_run --bench

The benchmarks compare home_run's Date/DateTime classes to the
standard library ones, showing you the amount of time an average
call to each method takes for both the standard library and
home_run, and the number of times home_run is faster or slower.
Output is in CSV, so an entry like this:

  Date._parse,362562,10235,35.42

means that:

* The standard library's Date._parse averaged 362,562 nanoseconds
  per call.
* home_run's Date._parse averaged 10,235 nanoseconds per call.
* Therefore, home_run's Date._parse method is 35.42 times faster

The bench task tries to be fair by ensuring that it runs the
benchmark for at least two seconds for both the standard
library and home_run's versions.

== Usage

home_run aims to be compatible with the standard library, except
for exceptions mentioned below.  So you can use it the same way
you use the standard library.

== Differences from standard library

* Written in C (mostly) instead of ruby.  Stores information in a
  C structure, and therefore has a range limitation.  home_run
  cannot handle dates after 5874773-08-15 or before -5877752-05-08
  on 32-bit platforms (with larger limits for 64-bit platforms).
* The Date class does not store fractional days (e.g. hours, minutes),
  or offsets. The DateTime class does handle fractional days and
  offsets.
* The DateTime class stores fractional days as the number of
  nanoseconds since midnight, so it cannot deal with differences
  less than a nanosecond.
* Neither Date nor DateTime uses Rational.  Places where the standard
  library returns Rationals, home_run returns integers or floats.
* Because Rational is not used, it is not required.  This can break
  other libraries that use Rational without directly requiring it.
* There is no support for modifying the date of calendar reform, the
  sg arguments are ignored and the Gregorian calendar is always used.
  This means that julian day 0 is -4173-11-24, instead of -4712-01-01.
* The undocumented Date#strftime format modifiers are not supported.
* The DateTime offset is checked for reasonableness. home_run
  does not support offsets with an absolute difference of more than
  14 hours from UTC.
* DateTime offsets are stored in minutes, so it will round offsets
  with fractional minutes to the nearest minute.
* All public class and instance methods for both Date and DateTime
  are implemented, except that the allocate class method is not
  defined and on 1.9, _dump and _load are used instead of
  marshal_dump and marshal_load.
* Only the public API is compatible, the private methods in the
  standard library are not implemented.
* The marshalling format differs from the one used by the standard
  library.  Note that the 1.8 and 1.9 standard library date
  marshalling formats differ from each other.
* Date#step treats the step value as an integer, so it cannot handle
  steps of fractional days.  DateTime#step can handle fractional
  day steps, though.
* When parsing the %Q modifier in _strptime, the hash returned
  includes an Integer :seconds value and a Float :sec_fraction
  value instead of a single Rational :seconds value.

Any other differences will either be documented here or considered
bugs, so please report any other differences you find.

== Reporting issues/bugs

home_run uses GitHub Issues for tracking issues/bugs:

  http://github.com/jeremyevans/home_run/issues

== Contributing

The source code is on GitHub:

  http://github.com/jeremyevans/home_run

To get a copy:

  git clone git://github.com/jeremyevans/home_run.git

There are a few requirements:

* Rake
* Ragel 6.5+ for building the ragel parser.  The compiled C file is
  included in the gem, so people installing the gem don't need
  Ragel.  The compiled C file is not checked into git, so you need
  Ragel if you are working with a git checkout.
* MSpec (not RSpec) for running the specs.  The specs are based on
  the rubyspec specs, which is why they use MSpec.
* RDoc 2.5.10+ (not yet released) or trunk from RubyForge.  The
  documentation will not display class methods correctly with RDoc
  2.5.9 and previous versions.

The directory layout is slightly unusual in that there is no
lib directory and there are .rb files in the ext directory. This may
change in a future version.

== Building

To build the library from a git checkout, after installing the
requirements:

  rake parser build

== Testing

The default rake task runs the specs, so just cd into the home_run
directory and run:

  rake

You need to build the library before running the specs.

== Benchmarking

To see the speedup that home_run gives you over the standard library:

  rake bench # or bench_long or bench_quick

To see how much less memory home_run uses compared to the standard
library:

  rake mem_bench

To see how much less garbage is created when instantiating objects
with home_run compared to the standard library:

  rake garbage_bench

== Platforms Supported

home_run has been tested on the following:

=== Operating Systems/Platforms

* Linux (i386)
* OpenBSD (amd64, i386)
* Windows (i386)

=== Compiler Versions

* gcc (3.3.5, 4.2.1, 4.4.3)

=== Ruby Versions

* rbx head (as of commit 0e265b92727cf3536053, 2010-08-16)
* ruby 1.8.6 (p0, p399)
* ruby 1.8.7 (p299)
* ruby 1.9.1 (p243, p378, p429)
* ruby 1.9.2 (rc2)
* ruby head

If your platform, compiler version, or ruby version is not listed
above, please test and send me a report including:

* Your operating system and platform (i386, x86_64/amd64)
* Your compiler
* Your ruby version
* The output of home_run --spec
* The output of home_run --bench

== Todo

* Get it working on jruby with the cext branch.
* Add more specs for greater code coverage and to test
  boundry conditions.
* Add way to configure parsing so that you can get 1.9 style
  dd/mm/yyyy parsing on 1.8 or mm/dd/yyyy parsing on on 1.9.
* Expand main ragel parser to handle more formats
* Add ragel versions of the 1.9 date parsing functions
* Add internal documentation of all C functions

== Author

Jeremy Evans
code@jeremyevans.net
