= home_run

home_run is an implementation of ruby's Date/DateTime classes in C,
with much better performance (20-200x) than the version in the
standard library, while being almost completely compatible.

== Installing the gem

  gem install home_run

== Installing into site_ruby

After installing the gem:

  home_run --install

Installing into site_ruby means that ruby will always use home_run's
Date/DateTime classes instead of the ones in the standard library.

If you ever want to uninstall from site_ruby:

  home_run --uninstall

== Running without installing into site_ruby

If you don't want to install into site_ruby, you can use home_run's
Date/DateTime classes for specific programs by running your script
using home_run:

  home_run ruby ...
  home_run irb ...

This manipulates the RUBYLIB and RUBYOPT environment variables so
that home_run's Date/DateTime classes will be used.

== Running the specs

You can run the specs after installing the gem, if you have MSpec
installed (gem install mspec):

  home_run --spec

== Running comparative benchmarks

You can run the benchmarks after installing the gem:

  home_run --bench

== Usage

home_run aims to be compatible with the standard library, except
for exceptions mentioned below.  So you can use it the same way
you use the standard library.

== Differences from standard library

* Written in C (mostly) instead of ruby.  Stores information in a
  C structure, and therefore has a range limitation.  home_run
  cannot handle dates after 5874773-08-15 or before -5877752-05-08
  on 32-bit platforms (with larger limits for 64-bit platforms).
* The Date class does not store fractional days (e.g. hours, minutes),
  or offsets. The DateTime class does handle fractional days and
  offsets.
* The DateTime class stores fractional days as the number of
  nanoseconds since midnight, so it cannot deal with differences
  less than a nanosecond.
* Neither Date nor DateTime uses Rational.  Places where the standard
  library returns Rationals, home_run returns integers or floats.
  This can break other libraries that use Rational without directly
  requiring it.
* There is no support for modifying the date of calendar reform, the
  Gregorian calendar is always used.  This means that julian day 0
  is -4173-11-24, instead of -4712-01-01.
* The undocumented strftime format modifiers are not supported.
* The DateTime offset is checked for reasonableness. home_run
  does not support offsets with an absolute difference of more than
  14 hours from UTC.
* DateTime offsets are stored in minutes, so it will round offsets
  with fractional minutes to the nearest minute.

== Contributing

The source code is on GitHub:

  http://github.com/jeremyevans/home_run

To get a copy:

  git clone git://github.com/jeremyevans/home_run.git

There are a few requirements:

* Rake
* Ragel 6.5+ for building the ragel parser.  The compiled C file is
  included in the gem, so people installing the gem don't need
  Ragel.  The compiled C file is not checked into git, so you need
  Ragel if you are working with a git checkout.
* MSpec (not RSpec) for running the specs.  The specs are based on
  the rubyspec specs, which is why they use MSpec.
* RDoc 2.5.10+ (not yet released) or trunk from RubyForge.  The
  documentation will not display class methods correctly with RDoc
  2.5.9 and previous versions.

The directory layout is slightly unusual in that there is no
lib directory and there are .rb files in the ext directory. This may
change in a future version.

== Building

To build the library from a git checkout, after installing the
requirements:

  rake parser build

== Testing

The default rake task runs the specs, so just cd into the home_run
directory and run:

  rake

You need to build the library before running the specs.

== Benchmarking

To see the speedup that home_run gives you over the standard library:

  rake bench # or bench_long or bench_quick

To see how much less memory home_run uses compared to the standard
library:

  rake mem_bench

To see how much less garbage is created when instantiating objects
with home_run compared to the standard library:

  rake garbage_bench

== Platforms Supported

home_run has been tested on the following:

=== Operating Systems/Platforms

* OpenBSD amd64
* OpenBSD i386
* Linux i386

=== Compiler Versions

* GCC 3.3.5
* GCC 4.2.1
* GCC 4.4.3

=== Ruby Versions

* ruby 1.8.6p399
* ruby 1.8.7p299
* ruby 1.9.1p378
* ruby 1.9.2rc2
* ruby 1.9.3dev

If your platform is not listed above, please test and send me a
report including:

* Your platform (i386, x86_64/amd64)
* Your operating system
* Your compiler
* Your ruby version
* The output of home_run --spec
* The output of home_run --bench

== Author

Jeremy Evans
code@jeremyevans.net
